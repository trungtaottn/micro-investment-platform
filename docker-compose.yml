version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: micro-investment-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: micro_investment_mongo_2024
      MONGO_INITDB_DATABASE: micro_investment
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - micro-investment-network

  # PostgreSQL Database
  postgresql:
    image: postgres:15
    container_name: micro-investment-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: micro_investment
      POSTGRES_USER: micro_investment_user
      POSTGRES_PASSWORD: micro_investment_postgres_2024
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - micro-investment-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: micro-investment-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - micro-investment-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: micro-investment-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://admin:micro_investment_mongo_2024@mongodb:27017/micro_investment?authSource=admin
      POSTGRES_URI: postgresql://micro_investment_user:micro_investment_postgres_2024@postgresql:5432/micro_investment
      REDIS_URI: redis://redis:6379
      JWT_SECRET: your_jwt_secret_here
      JWT_REFRESH_SECRET: your_jwt_refresh_secret_here
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - postgresql
      - redis
    networks:
      - micro-investment-network

  # Frontend (React Native Web)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: micro-investment-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_ENV: development
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - micro-investment-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: micro-investment-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - micro-investment-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: micro-investment-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - micro-investment-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: micro-investment-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: micro_investment_grafana_2024
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - micro-investment-network

volumes:
  mongodb_data:
    driver: local
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  micro-investment-network:
    driver: bridge